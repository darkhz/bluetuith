load_search_index({"pages":[{"title":"Bluetuith","text":"bluetuith is a TUI-based bluetooth connection manager, which can interact with bluetooth adapters and devices. It aims to be a replacement to most bluetooth managers, like blueman. #Features Transfer and receive files via OBEX. Perform pairing with authentication. Connect to\/disconnect from different devices. Interact with bluetooth adapters, toggle power and discovery states Connect to or manage Bluetooth based networking\/tethering (PANU\/DUN) Remotely control media playback on the connected device Mouse support","tags":"","url":"index.html"},{"title":"Installation","text":"#Requirements Before installation, ensure that the required dependencies are installed: Bluez DBus NetworkManager (optional, required for PANU) ModemManager (optional, required for DUN) PulseAudio (optional, required to manage device audio profiles) #Installation After installing the dependencies, you can install bluetuith using any one method listed below. #Package manager If your distribution\u2019s repositories have bluetuith, you can install it directly with your package manager. For Arch Linux, The package bluetuith-bin is in the AUR. Install it using an AUR helper of your choice like so: &lt;aur-helper&gt; -S bluetuith-bin. For more information on whether bluetuith is packaged for your distribution, check the repology page. #Releases You can retrieve the package\u2019s tagged release from the project\u2019s Releases page. Before downloading, note: The latest tag of the release Your operating system (for example, Linux) Your architecture (for example, x86_64) The binary is packaged in a gzipped tar file (with the extension .tar.gz) in the format: bluetuith_&lt;tag&gt;_&lt;Operating System&gt;_&lt;Architecture&gt;.tar.gz To download a package for: with the release tag \u2018v0.1.7\u2019, a \u2018Linux\u2019 distribution, on the \u2018x86_64\u2019 architecture, You would select: bluetuith_0.1.7_Linux_x86_64.tar.gz You can follow these steps for other Operating Systems as well. Note that for Apple computers like Macs, the Operating System is Darwin. #GO Toolchain Ensure that the go binary is present in your system before following the listed steps. #Install To install it directly from the repository without having to compile anything, use: go install github.com\/darkhz\/bluetuith@latest Note that the installed binary may be present in ~\/go\/bin, so ensure that your $PATH points to that directory as well. #Compile Clone the source into a folder using git, like so: git clone https:\/\/github.com\/darkhz\/bluetuith\/ The source should be cloned into a directory named \u201cbluetuith\u201d. Next, change the directory to the \u201cbluetuith\u201d folder: cd bluetuith Finally, use the go toolchain to build the project: go build main.go -o bluetuith-bin After the build process, a binary named \u201cbluetuith-bin\u201d should be present in your current directory.","tags":"","url":"Installation.html"},{"title":"Configuration","text":"Generally, bluetuith will work out-of-the-box, with no configuration required. In case you need to specify settings without using command-line options, a config file can be used. Typing bluetuith --help will show you the location of the config file. The configuration file is in the HJSON format. You can use the \u2013generate flag to generate the configuration. For example: { adapter: hci0 receive-dir: \/home\/user\/files keybindings: { Menu: Alt+m } theme: { Adapter: red } } #Keybindings The keybinding configuration is a list of KeybindingType: keybinding values. While defining keybindings, the global keybindings must not conflict with the non-global ones. It is possible to have duplicate keybindings amongst various non-global keybindings, provided they are not part of the same context. For example, this is allowed: keybindings: { FilebrowserSelect: Space PlayerTogglePlay: Space } But this isn\u2019t: keybindings: { Menu: Alt+m Close: Alt+m } #Modifiers The modifiers currently supported for keybindings are Ctrl, Alt and Shift. Shift should only be used in rare cases. For example, instead of : Shift+a, type A Alt+Shift+e, type Alt+E and so on. For the \u2018+\u2019 and the space characters, type Plus and Space respectively. For example, keybindings: { AdapterChange: Ctrl+Plus PlayerStop: Ctrl+Space } #Types Note that some keybinding combinations may be valid, but may not work due to the way your terminal\/environment handles it. The keybinding types are as follows: Type Global Context Default Keybinding Description Menu Yes App Alt+m Menu Select Yes App Enter Select an item Cancel Yes App Ctrl+X Cancel an operation Suspend Yes App Ctrl+Z Suspend the application Quit Yes App Q Quit Switch Yes App Tab Switch between menuitems\/buttons Close Yes App Esc Close popups\/pages Help Yes App ? Show help NavigateUp Yes App Up Navigate a step upwards NavigateDown Yes App Down Navigate a step downwards NavigateRight Yes App Right Navigate a step right NavigateLeft Yes App Left Navigate a step left NavigateTop Yes App PageUp Navigate to page beginning NavigateBottom Yes App PageDown Navigate to page end AdapterChange No Device a Change adapters AdapterTogglePower No Device o Toggle adapter power state AdapterToggleDiscoverable No Device S Toggle adapter discoverable state AdapterTogglePairable No Device P Toggle adapter pairable state AdapterToggleScan No Device s Toggle adapter scan state DeviceSendFiles No Device f Start file transfer session DeviceNetwork No Device n Show network Options DeviceConnect No Device c Connect to device DevicePair No Device p Pair with device DeviceTrust No Device t Trust device DeviceAudioProfiles No Device A Show device\u2019s audio profiles DeviceInfo No Device i Show device information DeviceRemove No Device d Remove device PlayerShow No Device m Show Media Player PlayerHide No Device M Hide Media Player PlayerTogglePlay No Device Space Play\/Pause PlayerNext No Device &gt; Next Track PlayerPrevious No Device &lt; Previous Track PlayerSeekForward No Device Left Seek Forward PlayerSeekBackward No Device Right Seek Backward PlayerStop No Device ] Stop Playback FilebrowserDirForward No Files Right Go forward a directory FilebrowserDirBack No Files Left Go back a directory FilebrowserSelect No Files Space Select item FilebrowserInvertSelection No Files a Invert selection FilebrowserSelectAll No Files A Select all FilebrowserRefresh No Files Ctrl+R Refresh FilebrowserToggleHidden No Files h Toggle hidden files FilebrowserConfirmSelection No Files Ctrl+S Confirm Selection ProgressView No Progress v View Downloads ProgressTransferSuspend No Progress z Suspend Transfer ProgressTransferResume No Progress g Resume Transfer ProgressTransferCancel No Progress x Cancel Transfer #Themes The theme configuration is a list of ElementType: color values. Color names or hexadecimal values can be provided for each element type. For example: theme: { Adapter: red Device: #000000 } To get a list of available element types and colors, use the --help command-line option.","tags":"","url":"Configuration.html"},{"title":"Command Line Options","text":"Table of Contents adapter list-adapters adapter-states connect-bdaddr confirm-on-quit no-warning receive-dir gsm-apn gsm-number theme generate version The general usage syntax is: bluetuith [&lt;option&gt;=&lt;parameter&gt;] or bluetuith [&lt;option&gt; &lt;parameter&gt;] adapter: Specify an adapter to use. list-adapters: List available adapters. adapter-states: Specify adapter states to enable\/disable. connect-bdaddr: Specify device address to connect. confirm-on-quit: Ask for confirmation before quitting the application. no-warning: Do not display warnings when the application has initialized. receive-dir: Specify a directory to store received files. gsm-apn: Specify GSM APN to connect to. gsm-number: Specify GSM number to dial. theme: Specify a theme in the HJSON format. generate: Generate configuration. version: Print version information. set-theme and set-theme-config As of v0.1.7, the set-theme and set-theme-config options are deprecated. Use the --theme command-line option or specify a theme directive within the configuration file. #adapter This option can be used to select the adapter when the application has initialized. For example: bluetuith --adapter=hci0 #list-adapters This option can be used to list the available bluetooth adapters. #adapter-states This option can be used to set various adapter properties and states on initialization. Valid properties are: powered, scan, discoverable, pairable. Valid states are: yes\/y\/on to enable a property and no\/n\/off to disable a property. The provided value must be in the [&lt;property&gt;:&lt;state&gt;] format. Property sequence Each property will be parsed and its state set based on the order in which you provide the properties. For example, if discoverable:yes, powered:yes is provided: - The \u2018discoverable\u2019 state will be set first and - The \u2018powered\u2019 state will be set after it. For example: bluetuith --adapter=hci0 --adapter-states=&quot;powered:yes, discoverable:yes, pairable:yes, scan:no&quot; #connect-bdaddr This option can be used to connect to a device based on its address. For example: bluetuith --connect-bdaddr=&quot;AA:BB:CC:DD:EE:FF&quot; #confirm-on-quit This option can be used to show a confirmation message before quitting the application. #no-warning This option can be used to hide warnings when the application has initialized. #receive-dir This option can be used to set the directory to receive transferred files. If this option is not set, the path will be set to $HOME\/bluetuith. #gsm-apn This option can be used to specify the GSM APN to connect to. While performing DUN-base networking, this option is required and can be used along with the gsm-number option. #gsm-number This option can be used to specify the GSM number to connect to. If this option is set, the gsm-apn option must also be provided. #theme This option can be used to set the theme for the application. For example: bluetuith --theme='{ Adapter: &quot;red&quot; }' To see the available element types and colors, use the --help option. #generate This option can be used to generate the configuration. Note that if you are regenerating the config, the existing values will be re-applied to the generated output. #version This option can be used to print the current version of the application.","tags":"","url":"Usage\/Command_Line_Options.html"},{"title":"Keybindings","text":"#Device Screen Operation Keybinding Open the menu Alt+m Navigate between menus Tab Navigate between devices\/options Up\/Down Toggle adapter power state o Toggle discoverable state S Toggle pairable state P Toggle scan (discovery state) s Change adapter a Send files f Connect to network n Progress view v Toggle connection with selected device c Pair with selected device p Trust selected device t Show media player m Hide media player M Show device information i Remove device from adapter d Cancel operation Ctrl+x Quit q #File Picker Operation Keybinding Navigate between directory entries Up\/Down Enter a directory Right Go back one directory Left Select one file Space Invert file selection a Select all files A Refresh current directory Ctrl + r Toggle hidden files Ctrl+h Confirm file(s) selection Ctrl+s Exit Escape #Progress View Operation Keybinding Navigate between transfers Up\/Down Suspend transfer z Resume transfer g Cancel transfer x Exit Escape #Media Player Operation Keybinding Toggle play\/pause Space Next &gt; Previous &lt; Rewind Left Fast forward Right Stop ]","tags":"","url":"Usage\/Keybindings.html"},{"title":"Additional Notes","text":"Ensure that the bluetooth service is up and running, and it is visible to DBus before launching the application. With systemd you can find out the status using the following command: systemctl status bluetooth.service. Only one transfer (either of send or receive) can happen on an adapter. Attempts to start another transfer while a transfer is already running (for example, trying to send files to a device when a transfer is already in progress) will be silently ignored.","tags":"","url":"Additional_Notes.html"},{"title":"Credits","text":"#Text User Interface The TUI was designed using tview, which in turn uses tcell. Thank you, rivo and gdamore, for these wonderful libraries. #Progress bars progressbar is used to render progress bars #Configuration and Command-line handling koanf is used to parse the HJSON configuration and the command-line parameters. #Text Printing color is used to print colored text to the terminal. #Bluez and DBus handling vishen, for the bluez implementation here. muka, for the agent implementation here.","tags":"","url":"Credits.html"}]});
